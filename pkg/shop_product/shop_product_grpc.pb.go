// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: shop_product.proto

package shop_product

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ShopProductService_GetProduct_FullMethodName    = "/shop_product.ShopProductService/GetProduct"
	ShopProductService_GetProducts_FullMethodName   = "/shop_product.ShopProductService/GetProducts"
	ShopProductService_ProductExists_FullMethodName = "/shop_product.ShopProductService/ProductExists"
	ShopProductService_ShopExists_FullMethodName    = "/shop_product.ShopProductService/ShopExists"
)

// ShopProductServiceClient is the client API for ShopProductService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShopProductServiceClient interface {
	GetProduct(ctx context.Context, in *GetProductRequest, opts ...grpc.CallOption) (*GetProductResponse, error)
	GetProducts(ctx context.Context, in *GetProductsRequest, opts ...grpc.CallOption) (*GetProductsResponse, error)
	ProductExists(ctx context.Context, in *CheckProductRequest, opts ...grpc.CallOption) (*CheckProductReponse, error)
	ShopExists(ctx context.Context, in *CheckShopRequest, opts ...grpc.CallOption) (*CheckShopReponse, error)
}

type shopProductServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewShopProductServiceClient(cc grpc.ClientConnInterface) ShopProductServiceClient {
	return &shopProductServiceClient{cc}
}

func (c *shopProductServiceClient) GetProduct(ctx context.Context, in *GetProductRequest, opts ...grpc.CallOption) (*GetProductResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProductResponse)
	err := c.cc.Invoke(ctx, ShopProductService_GetProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopProductServiceClient) GetProducts(ctx context.Context, in *GetProductsRequest, opts ...grpc.CallOption) (*GetProductsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProductsResponse)
	err := c.cc.Invoke(ctx, ShopProductService_GetProducts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopProductServiceClient) ProductExists(ctx context.Context, in *CheckProductRequest, opts ...grpc.CallOption) (*CheckProductReponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckProductReponse)
	err := c.cc.Invoke(ctx, ShopProductService_ProductExists_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopProductServiceClient) ShopExists(ctx context.Context, in *CheckShopRequest, opts ...grpc.CallOption) (*CheckShopReponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckShopReponse)
	err := c.cc.Invoke(ctx, ShopProductService_ShopExists_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShopProductServiceServer is the server API for ShopProductService service.
// All implementations must embed UnimplementedShopProductServiceServer
// for forward compatibility.
type ShopProductServiceServer interface {
	GetProduct(context.Context, *GetProductRequest) (*GetProductResponse, error)
	GetProducts(context.Context, *GetProductsRequest) (*GetProductsResponse, error)
	ProductExists(context.Context, *CheckProductRequest) (*CheckProductReponse, error)
	ShopExists(context.Context, *CheckShopRequest) (*CheckShopReponse, error)
	mustEmbedUnimplementedShopProductServiceServer()
}

// UnimplementedShopProductServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedShopProductServiceServer struct{}

func (UnimplementedShopProductServiceServer) GetProduct(context.Context, *GetProductRequest) (*GetProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProduct not implemented")
}
func (UnimplementedShopProductServiceServer) GetProducts(context.Context, *GetProductsRequest) (*GetProductsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProducts not implemented")
}
func (UnimplementedShopProductServiceServer) ProductExists(context.Context, *CheckProductRequest) (*CheckProductReponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductExists not implemented")
}
func (UnimplementedShopProductServiceServer) ShopExists(context.Context, *CheckShopRequest) (*CheckShopReponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShopExists not implemented")
}
func (UnimplementedShopProductServiceServer) mustEmbedUnimplementedShopProductServiceServer() {}
func (UnimplementedShopProductServiceServer) testEmbeddedByValue()                            {}

// UnsafeShopProductServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShopProductServiceServer will
// result in compilation errors.
type UnsafeShopProductServiceServer interface {
	mustEmbedUnimplementedShopProductServiceServer()
}

func RegisterShopProductServiceServer(s grpc.ServiceRegistrar, srv ShopProductServiceServer) {
	// If the following call pancis, it indicates UnimplementedShopProductServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ShopProductService_ServiceDesc, srv)
}

func _ShopProductService_GetProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopProductServiceServer).GetProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShopProductService_GetProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopProductServiceServer).GetProduct(ctx, req.(*GetProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopProductService_GetProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopProductServiceServer).GetProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShopProductService_GetProducts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopProductServiceServer).GetProducts(ctx, req.(*GetProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopProductService_ProductExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopProductServiceServer).ProductExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShopProductService_ProductExists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopProductServiceServer).ProductExists(ctx, req.(*CheckProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopProductService_ShopExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckShopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopProductServiceServer).ShopExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShopProductService_ShopExists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopProductServiceServer).ShopExists(ctx, req.(*CheckShopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ShopProductService_ServiceDesc is the grpc.ServiceDesc for ShopProductService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShopProductService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shop_product.ShopProductService",
	HandlerType: (*ShopProductServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProduct",
			Handler:    _ShopProductService_GetProduct_Handler,
		},
		{
			MethodName: "GetProducts",
			Handler:    _ShopProductService_GetProducts_Handler,
		},
		{
			MethodName: "ProductExists",
			Handler:    _ShopProductService_ProductExists_Handler,
		},
		{
			MethodName: "ShopExists",
			Handler:    _ShopProductService_ShopExists_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shop_product.proto",
}
